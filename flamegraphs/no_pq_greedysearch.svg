<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="348814"><g><title>libsystem_malloc.dylib`free_small (35 samples, 0.01%)</title><rect x="0.0072%" y="149" width="0.0100%" height="15" fill="rgb(227,0,7)" fg:x="25" fg:w="35"/><text x="0.2572%" y="159.50"></text></g><g><title>build_freshvamana`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.01%)</title><rect x="0.0063%" y="165" width="0.0112%" height="15" fill="rgb(217,0,24)" fg:x="22" fg:w="39"/><text x="0.2563%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (91 samples, 0.03%)</title><rect x="0.0175%" y="165" width="0.0261%" height="15" fill="rgb(221,193,54)" fg:x="61" fg:w="91"/><text x="0.2675%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (91 samples, 0.03%)</title><rect x="0.0175%" y="149" width="0.0261%" height="15" fill="rgb(248,212,6)" fg:x="61" fg:w="91"/><text x="0.2675%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (91 samples, 0.03%)</title><rect x="0.0175%" y="133" width="0.0261%" height="15" fill="rgb(208,68,35)" fg:x="61" fg:w="91"/><text x="0.2675%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (91 samples, 0.03%)</title><rect x="0.0175%" y="117" width="0.0261%" height="15" fill="rgb(232,128,0)" fg:x="61" fg:w="91"/><text x="0.2675%" y="127.50"></text></g><g><title>build_freshvamana`core::ptr::drop_in_place&lt;vectune::FreshVamanaMap&lt;build_freshvamana::Point,alloc::string::String&gt;&gt; (131 samples, 0.04%)</title><rect x="0.0063%" y="181" width="0.0376%" height="15" fill="rgb(207,160,47)" fg:x="22" fg:w="131"/><text x="0.2563%" y="191.50"></text></g><g><title>build_freshvamana`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (186 samples, 0.05%)</title><rect x="0.0479%" y="69" width="0.0533%" height="15" fill="rgb(228,23,34)" fg:x="167" fg:w="186"/><text x="0.2979%" y="79.50"></text></g><g><title>build_freshvamana`serde_json::de::Deserializer&lt;R&gt;::parse_integer (103 samples, 0.03%)</title><rect x="0.0717%" y="53" width="0.0295%" height="15" fill="rgb(218,30,26)" fg:x="250" fg:w="103"/><text x="0.3217%" y="63.50"></text></g><g><title>build_freshvamana`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (95 samples, 0.03%)</title><rect x="0.0740%" y="37" width="0.0272%" height="15" fill="rgb(220,122,19)" fg:x="258" fg:w="95"/><text x="0.3240%" y="47.50"></text></g><g><title>build_freshvamana`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (195 samples, 0.06%)</title><rect x="0.0464%" y="85" width="0.0559%" height="15" fill="rgb(250,228,42)" fg:x="162" fg:w="195"/><text x="0.2964%" y="95.50"></text></g><g><title>build_freshvamana`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (201 samples, 0.06%)</title><rect x="0.0464%" y="101" width="0.0576%" height="15" fill="rgb(240,193,28)" fg:x="162" fg:w="201"/><text x="0.2964%" y="111.50"></text></g><g><title>build_freshvamana`serde_json::de::from_trait (203 samples, 0.06%)</title><rect x="0.0462%" y="181" width="0.0582%" height="15" fill="rgb(216,20,37)" fg:x="161" fg:w="203"/><text x="0.2962%" y="191.50"></text></g><g><title>build_freshvamana`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (203 samples, 0.06%)</title><rect x="0.0462%" y="165" width="0.0582%" height="15" fill="rgb(206,188,39)" fg:x="161" fg:w="203"/><text x="0.2962%" y="175.50"></text></g><g><title>build_freshvamana`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (203 samples, 0.06%)</title><rect x="0.0462%" y="149" width="0.0582%" height="15" fill="rgb(217,207,13)" fg:x="161" fg:w="203"/><text x="0.2962%" y="159.50"></text></g><g><title>build_freshvamana`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (203 samples, 0.06%)</title><rect x="0.0462%" y="133" width="0.0582%" height="15" fill="rgb(231,73,38)" fg:x="161" fg:w="203"/><text x="0.2962%" y="143.50"></text></g><g><title>build_freshvamana`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (202 samples, 0.06%)</title><rect x="0.0464%" y="117" width="0.0579%" height="15" fill="rgb(225,20,46)" fg:x="162" fg:w="202"/><text x="0.2964%" y="127.50"></text></g><g><title>build_freshvamana`vectune::FreshVamana&lt;P&gt;::node_distance (647 samples, 0.19%)</title><rect x="0.1115%" y="181" width="0.1855%" height="15" fill="rgb(210,31,41)" fg:x="389" fg:w="647"/><text x="0.3615%" y="191.50"></text></g><g><title>build_freshvamana`vectune::FreshVamana&lt;P&gt;::node_distance (2,458 samples, 0.70%)</title><rect x="0.4854%" y="149" width="0.7047%" height="15" fill="rgb(221,200,47)" fg:x="1693" fg:w="2458"/><text x="0.7354%" y="159.50"></text></g><g><title>build_freshvamana`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2,482 samples, 0.71%)</title><rect x="0.4808%" y="165" width="0.7116%" height="15" fill="rgb(226,26,5)" fg:x="1677" fg:w="2482"/><text x="0.7308%" y="175.50"></text></g><g><title>build_freshvamana`core::slice::sort::merge_sort (43 samples, 0.01%)</title><rect x="1.1969%" y="165" width="0.0123%" height="15" fill="rgb(249,33,26)" fg:x="4175" fg:w="43"/><text x="1.4469%" y="175.50"></text></g><g><title>build_freshvamana`once_cell::race::once_box::OnceBox&lt;T&gt;::get_or_try_init (371 samples, 0.11%)</title><rect x="1.2092%" y="165" width="0.1064%" height="15" fill="rgb(235,183,28)" fg:x="4218" fg:w="371"/><text x="1.4592%" y="175.50"></text></g><g><title>build_freshvamana`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (319 samples, 0.09%)</title><rect x="14.6270%" y="149" width="0.0915%" height="15" fill="rgb(221,5,38)" fg:x="51021" fg:w="319"/><text x="14.8770%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (44 samples, 0.01%)</title><rect x="14.7540%" y="117" width="0.0126%" height="15" fill="rgb(247,18,42)" fg:x="51464" fg:w="44"/><text x="15.0040%" y="127.50"></text></g><g><title>build_freshvamana`core::slice::sort::merge_sort (123 samples, 0.04%)</title><rect x="14.7319%" y="133" width="0.0353%" height="15" fill="rgb(241,131,45)" fg:x="51387" fg:w="123"/><text x="14.9819%" y="143.50"></text></g><g><title>build_freshvamana`vectune::find_nearest (208 samples, 0.06%)</title><rect x="14.7293%" y="149" width="0.0596%" height="15" fill="rgb(249,31,29)" fg:x="51378" fg:w="208"/><text x="14.9793%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (36 samples, 0.01%)</title><rect x="17.8419%" y="85" width="0.0103%" height="15" fill="rgb(225,111,53)" fg:x="62235" fg:w="36"/><text x="18.0919%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (41 samples, 0.01%)</title><rect x="17.8407%" y="101" width="0.0118%" height="15" fill="rgb(238,160,17)" fg:x="62231" fg:w="41"/><text x="18.0907%" y="111.50"></text></g><g><title>build_freshvamana`vectune::insert_dist (10,689 samples, 3.06%)</title><rect x="14.7890%" y="149" width="3.0644%" height="15" fill="rgb(214,148,48)" fg:x="51586" fg:w="10689"/><text x="15.0390%" y="159.50">bui..</text></g><g><title>build_freshvamana`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (46 samples, 0.01%)</title><rect x="17.8402%" y="133" width="0.0132%" height="15" fill="rgb(232,36,49)" fg:x="62229" fg:w="46"/><text x="18.0902%" y="143.50"></text></g><g><title>build_freshvamana`alloc::raw_vec::finish_grow (46 samples, 0.01%)</title><rect x="17.8402%" y="117" width="0.0132%" height="15" fill="rgb(209,103,24)" fg:x="62229" fg:w="46"/><text x="18.0902%" y="127.50"></text></g><g><title>build_freshvamana`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (20,385 samples, 5.84%)</title><rect x="17.8700%" y="133" width="5.8441%" height="15" fill="rgb(229,88,8)" fg:x="62333" fg:w="20385"/><text x="18.1200%" y="143.50">build_f..</text></g><g><title>build_freshvamana`vectune::is_contained_in (20,458 samples, 5.87%)</title><rect x="17.8534%" y="149" width="5.8650%" height="15" fill="rgb(213,181,19)" fg:x="62275" fg:w="20458"/><text x="18.1034%" y="159.50">build_f..</text></g><g><title>build_freshvamana`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (232 samples, 0.07%)</title><rect x="23.7187%" y="133" width="0.0665%" height="15" fill="rgb(254,191,54)" fg:x="82734" fg:w="232"/><text x="23.9687%" y="143.50"></text></g><g><title>build_freshvamana`DYLD-STUB$$free (144 samples, 0.04%)</title><rect x="23.7852%" y="133" width="0.0413%" height="15" fill="rgb(241,83,37)" fg:x="82966" fg:w="144"/><text x="24.0352%" y="143.50"></text></g><g><title>build_freshvamana`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12,352 samples, 3.54%)</title><rect x="23.9082%" y="117" width="3.5411%" height="15" fill="rgb(233,36,39)" fg:x="83395" fg:w="12352"/><text x="24.1582%" y="127.50">buil..</text></g><g><title>build_freshvamana`DYLD-STUB$$malloc (56 samples, 0.02%)</title><rect x="27.4493%" y="117" width="0.0161%" height="15" fill="rgb(226,3,54)" fg:x="95747" fg:w="56"/><text x="27.6993%" y="127.50"></text></g><g><title>build_freshvamana`__rdl_alloc (142 samples, 0.04%)</title><rect x="27.4654%" y="117" width="0.0407%" height="15" fill="rgb(245,192,40)" fg:x="95803" fg:w="142"/><text x="27.7154%" y="127.50"></text></g><g><title>build_freshvamana`__rust_alloc (51 samples, 0.01%)</title><rect x="27.5061%" y="117" width="0.0146%" height="15" fill="rgb(238,167,29)" fg:x="95945" fg:w="51"/><text x="27.7561%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (46 samples, 0.01%)</title><rect x="27.5207%" y="117" width="0.0132%" height="15" fill="rgb(232,182,51)" fg:x="95996" fg:w="46"/><text x="27.7707%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (214 samples, 0.06%)</title><rect x="27.5339%" y="117" width="0.0614%" height="15" fill="rgb(231,60,39)" fg:x="96042" fg:w="214"/><text x="27.7839%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (700 samples, 0.20%)</title><rect x="27.5952%" y="117" width="0.2007%" height="15" fill="rgb(208,69,12)" fg:x="96256" fg:w="700"/><text x="27.8452%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (442 samples, 0.13%)</title><rect x="27.7959%" y="117" width="0.1267%" height="15" fill="rgb(235,93,37)" fg:x="96956" fg:w="442"/><text x="28.0459%" y="127.50"></text></g><g><title>build_freshvamana`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (14,449 samples, 4.14%)</title><rect x="23.8287%" y="133" width="4.1423%" height="15" fill="rgb(213,116,39)" fg:x="83118" fg:w="14449"/><text x="24.0787%" y="143.50">build..</text></g><g><title>libsystem_platform.dylib`_platform_memset (163 samples, 0.05%)</title><rect x="27.9243%" y="117" width="0.0467%" height="15" fill="rgb(222,207,29)" fg:x="97404" fg:w="163"/><text x="28.1743%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (122 samples, 0.03%)</title><rect x="27.9711%" y="133" width="0.0350%" height="15" fill="rgb(206,96,30)" fg:x="97567" fg:w="122"/><text x="28.2211%" y="143.50"></text></g><g><title>build_freshvamana`vectune::set_diff (15,215 samples, 4.36%)</title><rect x="23.7184%" y="149" width="4.3619%" height="15" fill="rgb(218,138,4)" fg:x="82733" fg:w="15215"/><text x="23.9684%" y="159.50">build..</text></g><g><title>libsystem_malloc.dylib`free (259 samples, 0.07%)</title><rect x="28.0060%" y="133" width="0.0743%" height="15" fill="rgb(250,191,14)" fg:x="97689" fg:w="259"/><text x="28.2560%" y="143.50"></text></g><g><title>build_freshvamana`core::slice::sort::merge_sort (219 samples, 0.06%)</title><rect x="28.0823%" y="133" width="0.0628%" height="15" fill="rgb(239,60,40)" fg:x="97955" fg:w="219"/><text x="28.3323%" y="143.50"></text></g><g><title>build_freshvamana`vectune::sort_and_resize (297 samples, 0.09%)</title><rect x="28.0803%" y="149" width="0.0851%" height="15" fill="rgb(206,27,48)" fg:x="97948" fg:w="297"/><text x="28.3303%" y="159.50"></text></g><g><title>build_freshvamana`vectune::FreshVamana&lt;P&gt;::greedy_search (109,986 samples, 31.53%)</title><rect x="1.3159%" y="165" width="31.5314%" height="15" fill="rgb(225,35,8)" fg:x="4590" fg:w="109986"/><text x="1.5659%" y="175.50">build_freshvamana`vectune::FreshVamana&lt;P&gt;::greedy_s..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (16,275 samples, 4.67%)</title><rect x="28.1815%" y="149" width="4.6658%" height="15" fill="rgb(250,213,24)" fg:x="98301" fg:w="16275"/><text x="28.4315%" y="159.50">libsy..</text></g><g><title>build_freshvamana`once_cell::race::once_box::OnceBox&lt;T&gt;::get_or_try_init (132 samples, 0.04%)</title><rect x="71.9965%" y="133" width="0.0378%" height="15" fill="rgb(247,123,22)" fg:x="251134" fg:w="132"/><text x="72.2465%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (105 samples, 0.03%)</title><rect x="72.0344%" y="133" width="0.0301%" height="15" fill="rgb(231,138,38)" fg:x="251266" fg:w="105"/><text x="72.2844%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_large (103 samples, 0.03%)</title><rect x="72.0350%" y="117" width="0.0295%" height="15" fill="rgb(231,145,46)" fg:x="251268" fg:w="103"/><text x="72.2850%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (103 samples, 0.03%)</title><rect x="72.0350%" y="101" width="0.0295%" height="15" fill="rgb(251,118,11)" fg:x="251268" fg:w="103"/><text x="72.2850%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (103 samples, 0.03%)</title><rect x="72.0350%" y="85" width="0.0295%" height="15" fill="rgb(217,147,25)" fg:x="251268" fg:w="103"/><text x="72.2850%" y="95.50"></text></g><g><title>build_freshvamana`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,548 samples, 0.73%)</title><rect x="71.3446%" y="149" width="0.7305%" height="15" fill="rgb(247,81,37)" fg:x="248860" fg:w="2548"/><text x="71.5946%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (36 samples, 0.01%)</title><rect x="72.0648%" y="133" width="0.0103%" height="15" fill="rgb(209,12,38)" fg:x="251372" fg:w="36"/><text x="72.3148%" y="143.50"></text></g><g><title>build_freshvamana`vectune::FreshVamana&lt;P&gt;::node_distance (137,197 samples, 39.33%)</title><rect x="32.8473%" y="165" width="39.3324%" height="15" fill="rgb(227,1,9)" fg:x="114576" fg:w="137197"/><text x="33.0973%" y="175.50">build_freshvamana`vectune::FreshVamana&lt;P&gt;::node_distance</text></g><g><title>build_freshvamana`once_cell::race::once_box::OnceBox&lt;T&gt;::get_or_try_init (365 samples, 0.10%)</title><rect x="72.0751%" y="149" width="0.1046%" height="15" fill="rgb(248,47,43)" fg:x="251408" fg:w="365"/><text x="72.3251%" y="159.50"></text></g><g><title>build_freshvamana`vectune::delete_id (4,286 samples, 1.23%)</title><rect x="72.1797%" y="165" width="1.2287%" height="15" fill="rgb(221,10,30)" fg:x="251773" fg:w="4286"/><text x="72.4297%" y="175.50"></text></g><g><title>build_freshvamana`vectune::insert_dist (137 samples, 0.04%)</title><rect x="73.4085%" y="165" width="0.0393%" height="15" fill="rgb(210,229,1)" fg:x="256059" fg:w="137"/><text x="73.6585%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (63 samples, 0.02%)</title><rect x="74.2023%" y="101" width="0.0181%" height="15" fill="rgb(222,148,37)" fg:x="258828" fg:w="63"/><text x="74.4523%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (68 samples, 0.02%)</title><rect x="74.2014%" y="117" width="0.0195%" height="15" fill="rgb(234,67,33)" fg:x="258825" fg:w="68"/><text x="74.4514%" y="127.50"></text></g><g><title>build_freshvamana`alloc::raw_vec::finish_grow (71 samples, 0.02%)</title><rect x="74.2012%" y="133" width="0.0204%" height="15" fill="rgb(247,98,35)" fg:x="258824" fg:w="71"/><text x="74.4512%" y="143.50"></text></g><g><title>build_freshvamana`vectune::insert_id (2,703 samples, 0.77%)</title><rect x="73.4477%" y="165" width="0.7749%" height="15" fill="rgb(247,138,52)" fg:x="256196" fg:w="2703"/><text x="73.6977%" y="175.50"></text></g><g><title>build_freshvamana`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (77 samples, 0.02%)</title><rect x="74.2006%" y="149" width="0.0221%" height="15" fill="rgb(213,79,30)" fg:x="258822" fg:w="77"/><text x="74.4506%" y="159.50"></text></g><g><title>build_freshvamana`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,175 samples, 0.62%)</title><rect x="74.2591%" y="149" width="0.6235%" height="15" fill="rgb(246,177,23)" fg:x="259026" fg:w="2175"/><text x="74.5091%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (37 samples, 0.01%)</title><rect x="74.8889%" y="149" width="0.0106%" height="15" fill="rgb(230,62,27)" fg:x="261223" fg:w="37"/><text x="75.1389%" y="159.50"></text></g><g><title>build_freshvamana`vectune::is_contained_in (2,392 samples, 0.69%)</title><rect x="74.2227%" y="165" width="0.6858%" height="15" fill="rgb(216,154,8)" fg:x="258899" fg:w="2392"/><text x="74.4727%" y="175.50"></text></g><g><title>build_freshvamana`rand::distributions::weighted_index::WeightedIndex&lt;X&gt;::new (53 samples, 0.02%)</title><rect x="90.6489%" y="149" width="0.0152%" height="15" fill="rgb(244,35,45)" fg:x="316196" fg:w="53"/><text x="90.8989%" y="159.50"></text></g><g><title>build_freshvamana`vectune::pq::PQ&lt;P&gt;::find_closest_centroid (28,290 samples, 8.11%)</title><rect x="90.6641%" y="149" width="8.1103%" height="15" fill="rgb(251,115,12)" fg:x="316249" fg:w="28290"/><text x="90.9141%" y="159.50">build_fresh..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (52 samples, 0.01%)</title><rect x="98.7750%" y="149" width="0.0149%" height="15" fill="rgb(240,54,50)" fg:x="344541" fg:w="52"/><text x="99.0250%" y="159.50"></text></g><g><title>build_freshvamana`vectune::pq::PQ&lt;P&gt;::quantize (83,313 samples, 23.88%)</title><rect x="74.9084%" y="165" width="23.8846%" height="15" fill="rgb(233,84,52)" fg:x="261291" fg:w="83313"/><text x="75.1584%" y="175.50">build_freshvamana`vectune::pq::PQ&lt;P&gt;::..</text></g><g><title>build_freshvamana`core::slice::sort::insertion_sort_shift_left (50 samples, 0.01%)</title><rect x="98.8401%" y="133" width="0.0143%" height="15" fill="rgb(207,117,47)" fg:x="344768" fg:w="50"/><text x="99.0901%" y="143.50"></text></g><g><title>build_freshvamana`core::slice::sort::merge_sort (214 samples, 0.06%)</title><rect x="98.7942%" y="149" width="0.0614%" height="15" fill="rgb(249,43,39)" fg:x="344608" fg:w="214"/><text x="99.0442%" y="159.50"></text></g><g><title>build_freshvamana`vectune::sort_list_by_dist (235 samples, 0.07%)</title><rect x="98.7933%" y="165" width="0.0674%" height="15" fill="rgb(209,38,44)" fg:x="344605" fg:w="235"/><text x="99.0433%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (42 samples, 0.01%)</title><rect x="98.8773%" y="165" width="0.0120%" height="15" fill="rgb(236,212,23)" fg:x="344898" fg:w="42"/><text x="99.1273%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (83 samples, 0.02%)</title><rect x="98.8900%" y="165" width="0.0238%" height="15" fill="rgb(242,79,21)" fg:x="344942" fg:w="83"/><text x="99.1400%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (35 samples, 0.01%)</title><rect x="98.9037%" y="149" width="0.0100%" height="15" fill="rgb(211,96,35)" fg:x="344990" fg:w="35"/><text x="99.1537%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (46 samples, 0.01%)</title><rect x="98.9137%" y="165" width="0.0132%" height="15" fill="rgb(253,215,40)" fg:x="345025" fg:w="46"/><text x="99.1637%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (94 samples, 0.03%)</title><rect x="98.9304%" y="149" width="0.0269%" height="15" fill="rgb(211,81,21)" fg:x="345083" fg:w="94"/><text x="99.1804%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (73 samples, 0.02%)</title><rect x="98.9364%" y="133" width="0.0209%" height="15" fill="rgb(208,190,38)" fg:x="345104" fg:w="73"/><text x="99.1864%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (47 samples, 0.01%)</title><rect x="98.9438%" y="117" width="0.0135%" height="15" fill="rgb(235,213,38)" fg:x="345130" fg:w="47"/><text x="99.1938%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (106 samples, 0.03%)</title><rect x="98.9275%" y="165" width="0.0304%" height="15" fill="rgb(237,122,38)" fg:x="345073" fg:w="106"/><text x="99.1775%" y="175.50"></text></g><g><title>build_freshvamana`vectune::FreshVamanaMap&lt;P,V&gt;::new (347,462 samples, 99.61%)</title><rect x="0.2970%" y="181" width="99.6124%" height="15" fill="rgb(244,218,35)" fg:x="1036" fg:w="347462"/><text x="0.5470%" y="191.50">build_freshvamana`vectune::FreshVamanaMap&lt;P,V&gt;::new</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3,319 samples, 0.95%)</title><rect x="98.9579%" y="165" width="0.9515%" height="15" fill="rgb(240,68,47)" fg:x="345179" fg:w="3319"/><text x="99.2079%" y="175.50"></text></g><g><title>build_freshvamana`vectune::insert_id (44 samples, 0.01%)</title><rect x="99.9114%" y="181" width="0.0126%" height="15" fill="rgb(210,16,53)" fg:x="348505" fg:w="44"/><text x="100.1614%" y="191.50"></text></g><g><title>build_freshvamana`main (348,795 samples, 99.99%)</title><rect x="0.0046%" y="261" width="99.9946%" height="15" fill="rgb(235,124,12)" fg:x="16" fg:w="348795"/><text x="0.2546%" y="271.50">build_freshvamana`main</text></g><g><title>build_freshvamana`std::rt::lang_start_internal (348,795 samples, 99.99%)</title><rect x="0.0046%" y="245" width="99.9946%" height="15" fill="rgb(224,169,11)" fg:x="16" fg:w="348795"/><text x="0.2546%" y="255.50">build_freshvamana`std::rt::lang_start_internal</text></g><g><title>build_freshvamana`std::rt::lang_start::_{{closure}} (348,795 samples, 99.99%)</title><rect x="0.0046%" y="229" width="99.9946%" height="15" fill="rgb(250,166,2)" fg:x="16" fg:w="348795"/><text x="0.2546%" y="239.50">build_freshvamana`std::rt::lang_start::_{{closure}}</text></g><g><title>build_freshvamana`std::sys_common::backtrace::__rust_begin_short_backtrace (348,795 samples, 99.99%)</title><rect x="0.0046%" y="213" width="99.9946%" height="15" fill="rgb(242,216,29)" fg:x="16" fg:w="348795"/><text x="0.2546%" y="223.50">build_freshvamana`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>build_freshvamana`build_freshvamana::main (348,795 samples, 99.99%)</title><rect x="0.0046%" y="197" width="99.9946%" height="15" fill="rgb(230,116,27)" fg:x="16" fg:w="348795"/><text x="0.2546%" y="207.50">build_freshvamana`build_freshvamana::main</text></g><g><title>libsystem_platform.dylib`_platform_memmove (235 samples, 0.07%)</title><rect x="99.9318%" y="181" width="0.0674%" height="15" fill="rgb(228,99,48)" fg:x="348576" fg:w="235"/><text x="100.1818%" y="191.50"></text></g><g><title>dyld`start (348,796 samples, 99.99%)</title><rect x="0.0046%" y="277" width="99.9948%" height="15" fill="rgb(253,11,6)" fg:x="16" fg:w="348796"/><text x="0.2546%" y="287.50">dyld`start</text></g><g><title>all (348,814 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(247,143,39)" fg:x="0" fg:w="348814"/><text x="0.2500%" y="303.50"></text></g></svg></svg>